高性能 开源rpc

基于rpc的高性能接口，对于用户是透明的
智能负载均衡,可以感知下游服务状态，减少整体延迟，提高系统吞吐量
自动服务注册与发现
高扩展性，插件性设计
运行时流量路由，运行时配置，流量可以根据不同的规则进行路由，支持蓝绿部署，数据中心感知路由
可视化服务化治理，查询服务元数据，健康状态和统计信息
故障转移，容错

monitor 监视器统计服务调用的次数和耗时

可伸缩，自动服务注册与发现




参数验证
结果缓存
异步调用
本地调用
回调参数
事件通知
本地存根
本地mock
延迟发布
延迟连接
粘性连接
token验证
路由规则


注册中心
zk
redis
广播注册
简单注册

协议
dubbo
rmi
hession

网络通讯
netty
mina
grizzly

序列化
hession
dubbo
json
java


代理
javassist
jdk


容错
Failover 故障自动切换，当故障发生时，重试其他服务器，通常用于读操作。(推荐) 重试将导致更长的延迟
Failfast 快速失败，只需一次调用，失败立即报告，通常用于非幂等写。如果服务器正在重新启动，可能会导致呼叫失败
Failsafe 故障安全，当出现异常时，直接忽略，通常用于写入审计日志和其他操作 调用信息丢失
Failback 故障自动恢复，后台记录故障请求，定期重传，通常用于消息通知操作 不可靠，重启服务器时丢失
Forking 只要返回一个成功，就会并行调用多个服务器，通常用于高实时的读取操作。需要浪费更多的服务资源
Broadcast 广播一个接一个地调用所有提供者，并且错误地报告任何错误，通常用于更新提供者的本地状态 速度慢，任何虚假的报道都是错误的。

负载均衡
随机 随机概率，根据权重设置随机概率(推荐) 在一个截面上发生碰撞的概率很高。当重新尝试时，可能会有不相等的瞬时压力。
轮询 轮循时，按设定轮后的重量比例约定 有一个缓慢的机器积累请求问题，和极端情况下可能导致雪崩
最小活跃数 最少活动的呼叫号码，同一活动号码的随机号码，活动号码是呼叫前后的计数差，使慢机收到的请求更少。不支持重量，在容量规划中，不以压力机为导向，按重量测量压力容量
一致性hash 一致性散列，相同的参数总是请求同一个提供者，当一个提供者挂起时，最初发送给该提供者的请求，基于虚拟节点，传播给其他提供者，不会引起剧烈的变化 压力分布不均匀

条件路由 路由规则基于条件表达式，简单易用 有一些复杂的多分支条件，规则难以描述
script路由 基于路由规则的脚本引擎，功能强大 没有沙盒在运行，脚本能力太强大，可能是后门

以超时为例，下面是优先级，从高到低(重试、loadbalance、活动也适用相同的规则):

方法级别、接口级别、默认/全局级别。
在同一级别上，使用者比提供者具有更高的优先级
提供者端配置以URL的形式通过registry传递给使用者端。

配置覆盖和优先级
-D
xml
properties

指定调用
reference.setUrl("dubbo://10.20.130.230:20880/com.xxx.XxxService");

Dubbo支持多级配置，并根据预先确定的优先级自动覆盖配置。最终，将所有配置聚合到数据总线URL，以驱动后续的服务公开、引用和其他流程。
ApplicationConfig、ServiceConfig和ReferenceConfig可以被视为配置源，它们通过直接面向用户的编程收集配置。

配置优先级
-D
外部配置
ServiceConfig, ReferenceConfig配置
本地 dubbo.properties

check=true启动检查服务是否可用，服务不可用得到一个空引用
check=false时不检查，循环依赖这种必须先启动起来，得到一个引用，调用时服务可用会自动重连
<dubbo:reference interface = "com.foo.BarService" check = "false" />
<dubbo:consumer check = "false" />
<dubbo:registry check="false" />

执行流程
容错-router script和条件路由-load balance负载均衡-invoker执行

路由器负责根据来自多个调用者的路由规则选择子集，如读写分离、应用隔离等。

故障自动切换，当有故障时，重试另一个服务器(默认)。通常用于读操作，但是重试可能会导致更长的延迟。
重试次数可以通过重试次数=2 retries="2"来设置(不包括第一次)。

cluster
failfast 快速失败，调用一次，失败立即出错。通常用于非幂等的写操作，例如添加记录
failsafe 安全失败，异常，直接忽略。通常用于写审计日志和其他操作。
Failback 故障自动恢复，无法记录后台请求，定期重传。通常用于消息通知操作。
Forking 同时调用多个服务器，一旦其中一个成功就返回。通常用于实时性要求高的读操作，但会浪费更多的业务资源。当fork =2时，可以设置最大并行数。
Broadcast 广播调用所有的提供者，一个接一个地调用，任何错误都会被报告(2.1.0+)。它通常用于通知所有提供者更新本地资源信息，如缓存或日志。

<dubbo:service cluster="failsafe" />
<dubbo:reference cluster="failsafe" />

Load Balance
Dubbo为集群负载均衡提供了许多均衡策略，默认情况下是random。
随机，按权重设定随机概率。
在一个区域发生碰撞的概率很高，但是调用的数量越大，分布就越均匀。当使用基于概率的权重时，分布是均匀的，这也有助于动态调整提供者的权重。

